#Idea: https://github.com/azure-samples/terraform-github-actions/blob/main/.github/workflows/tf-plan-apply.yml

name: CI/CD terraform

on:
  push:
    branches: [ "master" ]
    paths:
      - "terraform/**"

  pull_request:
    branches: [ "master" ]
    paths:
      - "terraform/**" 

defaults:
  run:
    working-directory: "terraform"

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    outputs:
      tfplanExitCode: ${{ steps.plan.outputs.exitcode }}
    steps:
    - uses: actions/checkout@v4

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform setup
      uses: hashicorp/setup-terraform@v3
    
    - name: Terraform init
      run: terraform init

    - name: Terraform format
      run: terraform fmt --recursive --check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure
    - name: Terraform plan
      id: plan
      run: |
        terraform plan --var-file "variables/example.tfvars" -out tfplan
        
        export exitcode=$?
        echo "exitcode=$?" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          echo "The exit code was: $exitcode"
          exit 0
        fi
      
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: "terraform/tfplan"
        if-no-files-found: error

    # Create string output of Terraform Plan
    - name: Create String Output
      id: plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
  apply:
    runs-on: ubuntu-latest
    if: github.ref_name == 'master'
    environment: sandbox
    env:
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
    permissions:
      id-token: write
      contents: read
    needs: [ validate ]
    steps:
      - uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Terraform setup
        uses: hashicorp/setup-terraform@v3
      
      - name: Terraform init
        run: terraform init

       # Download saved plan from artifacts  
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      # Terraform Apply
      - name: Terraform Apply
        run: terraform apply --var-file "variables/example.tfvars" -auto-approve tfplan
